name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pyinstaller

      - name: Download UPX (Windows only)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-win64.zip" -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath "upx"

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $upxDir = Get-ChildItem -Path "upx" -Recurse -Directory | Where-Object { $_.Name -like "*upx*" } | Select-Object -First 1 -ExpandProperty FullName
          pyinstaller --onefile --name TSP-Dune `
            --upx-dir "$upxDir" `
            --add-data "data\world_data.json;data" `
            tsp_solver.py
          New-Item -ItemType Directory -Path out -Force | Out-Null
          Copy-Item -Path dist\TSP-Dune.exe -Destination out\TSP-Dune.exe

      - name: Build with PyInstaller (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          pyinstaller --onefile --name TSP-Dune --add-data "data/world_data.json:data" tsp_solver.py
          mkdir -p out
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            tar -czf out/TSP-Dune-linux.tar.gz -C dist TSP-Dune || true
          else
            tar -czf out/TSP-Dune-macos.tar.gz -C dist TSP-Dune || true
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: TSP-Dune-${{ matrix.os }}
          path: out/

  create-release:
    name: Create Prerelease (when run on tag)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: TSP-Dune-windows-latest
          path: release_artifacts/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: TSP-Dune-ubuntu-latest
          path: release_artifacts/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: TSP-Dune-macos-latest
          path: release_artifacts/macos

      - name: List collected artifacts
        run: |
          ls -R release_artifacts || true

      - name: Create GitHub Prerelease
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            release_artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mark previous release as "Last release"
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const currentTag = (process.env.GITHUB_REF || '').replace('refs/tags/','');
            const all = await github.paginate(github.rest.repos.listReleases, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            // Exclude the current tag release and drafts; pick most recent prior
            const prev = all
              .filter(r => r.tag_name !== currentTag && !r.draft)
              .sort((a,b) => new Date(b.created_at) - new Date(a.created_at))[0];
            if (!prev) {
              core.info('No previous release found to mark.');
              return;
            }
            const newName = `${prev.name || prev.tag_name} â€” Last release`;
            const newBody = `Marked as Last release before ${currentTag}.\n\n${prev.body || ''}`.trim();
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: prev.id,
              prerelease: false,
              name: newName,
              body: newBody,
              make_latest: 'true',
            });
            core.info(`Updated previous release ${prev.tag_name} as Last release.`);